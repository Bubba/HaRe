[("!!",Ent (PlainModule "PreludeList") (HsVar "!!") Value),("$",Ent (PlainModule "Prelude") (HsVar "$") Value),("$!",Ent (PlainModule "Prelude") (HsVar "$!") Value),("&&",Ent (PlainModule "Prelude") (HsVar "&&") Value),("()",Ent (PlainModule "Prelude") (HsCon "()") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "()", conArity = 0, conFields = Nothing}], fields = []}))),("()",Ent (PlainModule "Prelude") (HsCon "()") (ConstrOf "()" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "()", conArity = 0, conFields = Nothing}], fields = []}))),("(,)",Ent (PlainModule "Prelude") (HsCon "(,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,)", conArity = 2, conFields = Nothing}], fields = []}))),("(,)",Ent (PlainModule "Prelude") (HsCon "(,)") (ConstrOf "(,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,)", conArity = 2, conFields = Nothing}], fields = []}))),("(,,)",Ent (PlainModule "Prelude") (HsCon "(,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,)", conArity = 3, conFields = Nothing}], fields = []}))),("(,,)",Ent (PlainModule "Prelude") (HsCon "(,,)") (ConstrOf "(,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,)", conArity = 3, conFields = Nothing}], fields = []}))),("(,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,)", conArity = 4, conFields = Nothing}], fields = []}))),("(,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,)") (ConstrOf "(,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,)", conArity = 4, conFields = Nothing}], fields = []}))),("(,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,)", conArity = 5, conFields = Nothing}], fields = []}))),("(,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,)") (ConstrOf "(,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,)", conArity = 5, conFields = Nothing}], fields = []}))),("(,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,)", conArity = 6, conFields = Nothing}], fields = []}))),("(,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,)") (ConstrOf "(,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,)", conArity = 6, conFields = Nothing}], fields = []}))),("(,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,)", conArity = 7, conFields = Nothing}], fields = []}))),("(,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,)") (ConstrOf "(,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,)", conArity = 7, conFields = Nothing}], fields = []}))),("(,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,)", conArity = 8, conFields = Nothing}], fields = []}))),("(,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,)") (ConstrOf "(,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,)", conArity = 8, conFields = Nothing}], fields = []}))),("(,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,)", conArity = 9, conFields = Nothing}], fields = []}))),("(,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,)") (ConstrOf "(,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,)", conArity = 9, conFields = Nothing}], fields = []}))),("(,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,)", conArity = 10, conFields = Nothing}], fields = []}))),("(,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,)") (ConstrOf "(,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,)", conArity = 10, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,)", conArity = 11, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,)") (ConstrOf "(,,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,)", conArity = 11, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,)", conArity = 12, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,)") (ConstrOf "(,,,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,)", conArity = 12, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,)", conArity = 13, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,)") (ConstrOf "(,,,,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,)", conArity = 13, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,,)", conArity = 14, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,,)") (ConstrOf "(,,,,,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,,)", conArity = 14, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,,,)") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,,,)", conArity = 15, conFields = Nothing}], fields = []}))),("(,,,,,,,,,,,,,,)",Ent (PlainModule "Prelude") (HsCon "(,,,,,,,,,,,,,,)") (ConstrOf "(,,,,,,,,,,,,,,)" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "(,,,,,,,,,,,,,,)", conArity = 15, conFields = Nothing}], fields = []}))),("*",Ent (PlainModule "Prelude") (HsVar "*") (MethodOf "Num" 2 ["+","-","*"])),("**",Ent (PlainModule "Prelude") (HsVar "**") (MethodOf "Floating" 1 ["**","logBase"])),("+",Ent (PlainModule "Prelude") (HsVar "+") (MethodOf "Num" 2 ["+","-","*"])),("++",Ent (PlainModule "PreludeList") (HsVar "++") Value),("-",Ent (PlainModule "Prelude") (HsVar "-") (MethodOf "Num" 2 ["+","-","*"])),("->",Ent (PlainModule "Prelude") (HsCon "->") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),(".",Ent (PlainModule "Prelude") (HsVar ".") Value),("/",Ent (PlainModule "Prelude") (HsVar "/") (MethodOf "Fractional" 1 ["/"])),("/=",Ent (PlainModule "Prelude") (HsVar "/=") (MethodOf "Eq" 0 ["==","/="])),(":",Ent (PlainModule "Prelude") (HsCon ":") (ConstrOf "[]" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "[]", conArity = 0, conFields = Nothing},ConInfo {conName = ":", conArity = 2, conFields = Nothing}], fields = []}))),("<",Ent (PlainModule "Prelude") (HsVar "<") (MethodOf "Ord" 1 ["<","<=",">=",">"])),("<=",Ent (PlainModule "Prelude") (HsVar "<=") (MethodOf "Ord" 1 ["<","<=",">=",">"])),("=<<",Ent (PlainModule "Prelude") (HsVar "=<<") Value),("==",Ent (PlainModule "Prelude") (HsVar "==") (MethodOf "Eq" 0 ["==","/="])),(">",Ent (PlainModule "Prelude") (HsVar ">") (MethodOf "Ord" 1 ["<","<=",">=",">"])),(">=",Ent (PlainModule "Prelude") (HsVar ">=") (MethodOf "Ord" 1 ["<","<=",">=",">"])),(">>",Ent (PlainModule "Prelude") (HsVar ">>") (MethodOf "Monad" 0 [">>"])),(">>=",Ent (PlainModule "Prelude") (HsVar ">>=") (MethodOf "Monad" 0 [">>="])),("Bool",Ent (PlainModule "Prelude") (HsCon "Bool") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "False", conArity = 0, conFields = Nothing},ConInfo {conName = "True", conArity = 0, conFields = Nothing}], fields = []}))),("Bounded",Ent (PlainModule "Prelude") (HsCon "Bounded") (Class 0 ["minBound","maxBound"])),("Char",Ent (PlainModule "Prelude") (HsCon "Char") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("Double",Ent (PlainModule "Prelude") (HsCon "Double") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("EQ",Ent (PlainModule "Prelude") (HsCon "EQ") (ConstrOf "Ordering" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "LT", conArity = 0, conFields = Nothing},ConInfo {conName = "EQ", conArity = 0, conFields = Nothing},ConInfo {conName = "GT", conArity = 0, conFields = Nothing}], fields = []}))),("Either",Ent (PlainModule "Prelude") (HsCon "Either") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Left", conArity = 1, conFields = Nothing},ConInfo {conName = "Right", conArity = 1, conFields = Nothing}], fields = []}))),("Enum",Ent (PlainModule "Prelude") (HsCon "Enum") (Class 0 ["succ","pred","toEnum","fromEnum","enumFrom","enumFromThen","enumFromTo","enumFromThenTo"])),("Eq",Ent (PlainModule "Prelude") (HsCon "Eq") (Class 0 ["==","/="])),("False",Ent (PlainModule "Prelude") (HsCon "False") (ConstrOf "Bool" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "False", conArity = 0, conFields = Nothing},ConInfo {conName = "True", conArity = 0, conFields = Nothing}], fields = []}))),("FilePath",Ent (PlainModule "PreludeIO") (HsCon "FilePath") (Type (TypeInfo {defType = Just Synonym, constructors = [], fields = []}))),("Float",Ent (PlainModule "Prelude") (HsCon "Float") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("Floating",Ent (PlainModule "Prelude") (HsCon "Floating") (Class 1 ["pi","exp","log","sqrt","**","logBase","sin","cos","tan","asin","acos","atan","sinh","cosh","tanh","asinh","acosh","atanh"])),("Fractional",Ent (PlainModule "Prelude") (HsCon "Fractional") (Class 1 ["/","recip","fromRational"])),("Functor",Ent (PlainModule "Prelude") (HsCon "Functor") (Class 0 ["fmap"])),("GT",Ent (PlainModule "Prelude") (HsCon "GT") (ConstrOf "Ordering" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "LT", conArity = 0, conFields = Nothing},ConInfo {conName = "EQ", conArity = 0, conFields = Nothing},ConInfo {conName = "GT", conArity = 0, conFields = Nothing}], fields = []}))),("IO",Ent (PlainModule "Prelude") (HsCon "IO") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("IOError",Ent (PlainModule "PreludeIO") (HsCon "IOError") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "IOE", conArity = 2, conFields = Nothing}], fields = []}))),("Int",Ent (PlainModule "Prelude") (HsCon "Int") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("Integer",Ent (PlainModule "Prelude") (HsCon "Integer") (Type (TypeInfo {defType = Just Primitive, constructors = [], fields = []}))),("Integral",Ent (PlainModule "Prelude") (HsCon "Integral") (Class 2 ["quot","rem","div","mod","quotRem","divMod","toInteger"])),("Just",Ent (PlainModule "Prelude") (HsCon "Just") (ConstrOf "Maybe" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("LT",Ent (PlainModule "Prelude") (HsCon "LT") (ConstrOf "Ordering" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "LT", conArity = 0, conFields = Nothing},ConInfo {conName = "EQ", conArity = 0, conFields = Nothing},ConInfo {conName = "GT", conArity = 0, conFields = Nothing}], fields = []}))),("Left",Ent (PlainModule "Prelude") (HsCon "Left") (ConstrOf "Either" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Left", conArity = 1, conFields = Nothing},ConInfo {conName = "Right", conArity = 1, conFields = Nothing}], fields = []}))),("Maybe",Ent (PlainModule "Prelude") (HsCon "Maybe") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("Monad",Ent (PlainModule "Prelude") (HsCon "Monad") (Class 0 [">>=",">>","return","fail"])),("Nothing",Ent (PlainModule "Prelude") (HsCon "Nothing") (ConstrOf "Maybe" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("Num",Ent (PlainModule "Prelude") (HsCon "Num") (Class 2 ["+","-","*","negate","abs","signum","fromInteger"])),("Ord",Ent (PlainModule "Prelude") (HsCon "Ord") (Class 1 ["compare","<","<=",">=",">","max","min"])),("Ordering",Ent (PlainModule "Prelude") (HsCon "Ordering") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "LT", conArity = 0, conFields = Nothing},ConInfo {conName = "EQ", conArity = 0, conFields = Nothing},ConInfo {conName = "GT", conArity = 0, conFields = Nothing}], fields = []}))),("Rational",Ent (PlainModule "Prelude") (HsCon "Rational") (Type (TypeInfo {defType = Just Synonym, constructors = [], fields = []}))),("Read",Ent (PlainModule "PreludeText") (HsCon "Read") (Class 0 ["readsPrec","readList"])),("ReadS",Ent (PlainModule "PreludeText") (HsCon "ReadS") (Type (TypeInfo {defType = Just Synonym, constructors = [], fields = []}))),("Real",Ent (PlainModule "Prelude") (HsCon "Real") (Class 2 ["toRational"])),("RealFloat",Ent (PlainModule "Prelude") (HsCon "RealFloat") (Class 2 ["floatRadix","floatDigits","floatRange","decodeFloat","encodeFloat","exponent","significand","scaleFloat","isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE","atan2"])),("RealFrac",Ent (PlainModule "Prelude") (HsCon "RealFrac") (Class 2 ["properFraction","truncate","round","ceiling","floor"])),("Right",Ent (PlainModule "Prelude") (HsCon "Right") (ConstrOf "Either" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Left", conArity = 1, conFields = Nothing},ConInfo {conName = "Right", conArity = 1, conFields = Nothing}], fields = []}))),("Show",Ent (PlainModule "PreludeText") (HsCon "Show") (Class 0 ["showsPrec","show","showList"])),("ShowS",Ent (PlainModule "PreludeText") (HsCon "ShowS") (Type (TypeInfo {defType = Just Synonym, constructors = [], fields = []}))),("String",Ent (PlainModule "Prelude") (HsCon "String") (Type (TypeInfo {defType = Just Synonym, constructors = [], fields = []}))),("True",Ent (PlainModule "Prelude") (HsCon "True") (ConstrOf "Bool" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "False", conArity = 0, conFields = Nothing},ConInfo {conName = "True", conArity = 0, conFields = Nothing}], fields = []}))),("[]",Ent (PlainModule "Prelude") (HsCon "[]") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "[]", conArity = 0, conFields = Nothing},ConInfo {conName = ":", conArity = 2, conFields = Nothing}], fields = []}))),("[]",Ent (PlainModule "Prelude") (HsCon "[]") (ConstrOf "[]" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "[]", conArity = 0, conFields = Nothing},ConInfo {conName = ":", conArity = 2, conFields = Nothing}], fields = []}))),("^",Ent (PlainModule "Prelude") (HsVar "^") Value),("^^",Ent (PlainModule "Prelude") (HsVar "^^") Value),("abs",Ent (PlainModule "Prelude") (HsVar "abs") (MethodOf "Num" 2 ["abs","signum"])),("acos",Ent (PlainModule "Prelude") (HsVar "acos") (MethodOf "Floating" 1 ["asin","acos","atan"])),("acosh",Ent (PlainModule "Prelude") (HsVar "acosh") (MethodOf "Floating" 1 ["asinh","acosh","atanh"])),("all",Ent (PlainModule "PreludeList") (HsVar "all") Value),("and",Ent (PlainModule "PreludeList") (HsVar "and") Value),("any",Ent (PlainModule "PreludeList") (HsVar "any") Value),("appendFile",Ent (PlainModule "PreludeIO") (HsVar "appendFile") Value),("asTypeOf",Ent (PlainModule "Prelude") (HsVar "asTypeOf") Value),("asin",Ent (PlainModule "Prelude") (HsVar "asin") (MethodOf "Floating" 1 ["asin","acos","atan"])),("asinh",Ent (PlainModule "Prelude") (HsVar "asinh") (MethodOf "Floating" 1 ["asinh","acosh","atanh"])),("atan",Ent (PlainModule "Prelude") (HsVar "atan") (MethodOf "Floating" 1 ["asin","acos","atan"])),("atan2",Ent (PlainModule "Prelude") (HsVar "atan2") (MethodOf "RealFloat" 2 ["atan2"])),("atanh",Ent (PlainModule "Prelude") (HsVar "atanh") (MethodOf "Floating" 1 ["asinh","acosh","atanh"])),("break",Ent (PlainModule "PreludeList") (HsVar "break") Value),("catch",Ent (PlainModule "PreludeIO") (HsVar "catch") Value),("ceiling",Ent (PlainModule "Prelude") (HsVar "ceiling") (MethodOf "RealFrac" 2 ["ceiling","floor"])),("compare",Ent (PlainModule "Prelude") (HsVar "compare") (MethodOf "Ord" 1 ["compare"])),("concat",Ent (PlainModule "PreludeList") (HsVar "concat") Value),("concatMap",Ent (PlainModule "PreludeList") (HsVar "concatMap") Value),("const",Ent (PlainModule "Prelude") (HsVar "const") Value),("cos",Ent (PlainModule "Prelude") (HsVar "cos") (MethodOf "Floating" 1 ["sin","cos","tan"])),("cosh",Ent (PlainModule "Prelude") (HsVar "cosh") (MethodOf "Floating" 1 ["sinh","cosh","tanh"])),("curry",Ent (PlainModule "Prelude") (HsVar "curry") Value),("cycle",Ent (PlainModule "PreludeList") (HsVar "cycle") Value),("decodeFloat",Ent (PlainModule "Prelude") (HsVar "decodeFloat") (MethodOf "RealFloat" 2 ["decodeFloat"])),("div",Ent (PlainModule "Prelude") (HsVar "div") (MethodOf "Integral" 2 ["div","mod"])),("divMod",Ent (PlainModule "Prelude") (HsVar "divMod") (MethodOf "Integral" 2 ["quotRem","divMod"])),("drop",Ent (PlainModule "PreludeList") (HsVar "drop") Value),("dropWhile",Ent (PlainModule "PreludeList") (HsVar "dropWhile") Value),("either",Ent (PlainModule "Prelude") (HsVar "either") Value),("elem",Ent (PlainModule "PreludeList") (HsVar "elem") Value),("encodeFloat",Ent (PlainModule "Prelude") (HsVar "encodeFloat") (MethodOf "RealFloat" 2 ["encodeFloat"])),("enumFrom",Ent (PlainModule "Prelude") (HsVar "enumFrom") (MethodOf "Enum" 0 ["enumFrom"])),("enumFromThen",Ent (PlainModule "Prelude") (HsVar "enumFromThen") (MethodOf "Enum" 0 ["enumFromThen"])),("enumFromThenTo",Ent (PlainModule "Prelude") (HsVar "enumFromThenTo") (MethodOf "Enum" 0 ["enumFromThenTo"])),("enumFromTo",Ent (PlainModule "Prelude") (HsVar "enumFromTo") (MethodOf "Enum" 0 ["enumFromTo"])),("error",Ent (PlainModule "Prelude") (HsVar "error") Value),("even",Ent (PlainModule "Prelude") (HsVar "even") Value),("exp",Ent (PlainModule "Prelude") (HsVar "exp") (MethodOf "Floating" 1 ["exp","log","sqrt"])),("exponent",Ent (PlainModule "Prelude") (HsVar "exponent") (MethodOf "RealFloat" 2 ["exponent"])),("fail",Ent (PlainModule "Prelude") (HsVar "fail") (MethodOf "Monad" 0 ["fail"])),("filter",Ent (PlainModule "PreludeList") (HsVar "filter") Value),("flip",Ent (PlainModule "Prelude") (HsVar "flip") Value),("floatDigits",Ent (PlainModule "Prelude") (HsVar "floatDigits") (MethodOf "RealFloat" 2 ["floatDigits"])),("floatRadix",Ent (PlainModule "Prelude") (HsVar "floatRadix") (MethodOf "RealFloat" 2 ["floatRadix"])),("floatRange",Ent (PlainModule "Prelude") (HsVar "floatRange") (MethodOf "RealFloat" 2 ["floatRange"])),("floor",Ent (PlainModule "Prelude") (HsVar "floor") (MethodOf "RealFrac" 2 ["ceiling","floor"])),("fmap",Ent (PlainModule "Prelude") (HsVar "fmap") (MethodOf "Functor" 0 ["fmap"])),("foldl",Ent (PlainModule "PreludeList") (HsVar "foldl") Value),("foldl1",Ent (PlainModule "PreludeList") (HsVar "foldl1") Value),("foldr",Ent (PlainModule "PreludeList") (HsVar "foldr") Value),("foldr1",Ent (PlainModule "PreludeList") (HsVar "foldr1") Value),("fromEnum",Ent (PlainModule "Prelude") (HsVar "fromEnum") (MethodOf "Enum" 0 ["fromEnum"])),("fromInteger",Ent (PlainModule "Prelude") (HsVar "fromInteger") (MethodOf "Num" 2 ["fromInteger"])),("fromIntegral",Ent (PlainModule "Prelude") (HsVar "fromIntegral") Value),("fromRational",Ent (PlainModule "Prelude") (HsVar "fromRational") (MethodOf "Fractional" 1 ["fromRational"])),("fst",Ent (PlainModule "Prelude") (HsVar "fst") Value),("gcd",Ent (PlainModule "Prelude") (HsVar "gcd") Value),("getChar",Ent (PlainModule "PreludeIO") (HsVar "getChar") Value),("getContents",Ent (PlainModule "PreludeIO") (HsVar "getContents") Value),("getLine",Ent (PlainModule "PreludeIO") (HsVar "getLine") Value),("head",Ent (PlainModule "PreludeList") (HsVar "head") Value),("id",Ent (PlainModule "Prelude") (HsVar "id") Value),("init",Ent (PlainModule "PreludeList") (HsVar "init") Value),("interact",Ent (PlainModule "PreludeIO") (HsVar "interact") Value),("ioError",Ent (PlainModule "PreludeIO") (HsVar "ioError") Value),("isDenormalized",Ent (PlainModule "Prelude") (HsVar "isDenormalized") (MethodOf "RealFloat" 2 ["isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE"])),("isIEEE",Ent (PlainModule "Prelude") (HsVar "isIEEE") (MethodOf "RealFloat" 2 ["isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE"])),("isInfinite",Ent (PlainModule "Prelude") (HsVar "isInfinite") (MethodOf "RealFloat" 2 ["isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE"])),("isNaN",Ent (PlainModule "Prelude") (HsVar "isNaN") (MethodOf "RealFloat" 2 ["isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE"])),("isNegativeZero",Ent (PlainModule "Prelude") (HsVar "isNegativeZero") (MethodOf "RealFloat" 2 ["isNaN","isInfinite","isDenormalized","isNegativeZero","isIEEE"])),("iterate",Ent (PlainModule "PreludeList") (HsVar "iterate") Value),("last",Ent (PlainModule "PreludeList") (HsVar "last") Value),("lcm",Ent (PlainModule "Prelude") (HsVar "lcm") Value),("length",Ent (PlainModule "PreludeList") (HsVar "length") Value),("lex",Ent (PlainModule "PreludeText") (HsVar "lex") Value),("lexOrder",Ent (PlainModule "Prelude") (HsVar "lexOrder") Value),("lines",Ent (PlainModule "PreludeList") (HsVar "lines") Value),("log",Ent (PlainModule "Prelude") (HsVar "log") (MethodOf "Floating" 1 ["exp","log","sqrt"])),("logBase",Ent (PlainModule "Prelude") (HsVar "logBase") (MethodOf "Floating" 1 ["**","logBase"])),("lookup",Ent (PlainModule "PreludeList") (HsVar "lookup") Value),("map",Ent (PlainModule "PreludeList") (HsVar "map") Value),("mapM",Ent (PlainModule "Prelude") (HsVar "mapM") Value),("mapM_",Ent (PlainModule "Prelude") (HsVar "mapM_") Value),("max",Ent (PlainModule "Prelude") (HsVar "max") (MethodOf "Ord" 1 ["max","min"])),("maxBound",Ent (PlainModule "Prelude") (HsVar "maxBound") (MethodOf "Bounded" 0 ["maxBound"])),("maximum",Ent (PlainModule "PreludeList") (HsVar "maximum") Value),("maybe",Ent (PlainModule "Prelude") (HsVar "maybe") Value),("min",Ent (PlainModule "Prelude") (HsVar "min") (MethodOf "Ord" 1 ["max","min"])),("minBound",Ent (PlainModule "Prelude") (HsVar "minBound") (MethodOf "Bounded" 0 ["minBound"])),("minimum",Ent (PlainModule "PreludeList") (HsVar "minimum") Value),("mod",Ent (PlainModule "Prelude") (HsVar "mod") (MethodOf "Integral" 2 ["div","mod"])),("negate",Ent (PlainModule "Prelude") (HsVar "negate") (MethodOf "Num" 2 ["negate"])),("not",Ent (PlainModule "Prelude") (HsVar "not") Value),("notElem",Ent (PlainModule "PreludeList") (HsVar "notElem") Value),("null",Ent (PlainModule "PreludeList") (HsVar "null") Value),("numericEnumFrom",Ent (PlainModule "Prelude") (HsVar "numericEnumFrom") Value),("numericEnumFromThen",Ent (PlainModule "Prelude") (HsVar "numericEnumFromThen") Value),("numericEnumFromThenTo",Ent (PlainModule "Prelude") (HsVar "numericEnumFromThenTo") Value),("numericEnumFromTo",Ent (PlainModule "Prelude") (HsVar "numericEnumFromTo") Value),("odd",Ent (PlainModule "Prelude") (HsVar "odd") Value),("or",Ent (PlainModule "PreludeList") (HsVar "or") Value),("otherwise",Ent (PlainModule "Prelude") (HsVar "otherwise") Value),("pi",Ent (PlainModule "Prelude") (HsVar "pi") (MethodOf "Floating" 1 ["pi"])),("pred",Ent (PlainModule "Prelude") (HsVar "pred") (MethodOf "Enum" 0 ["succ","pred"])),("print",Ent (PlainModule "PreludeIO") (HsVar "print") Value),("product",Ent (PlainModule "PreludeList") (HsVar "product") Value),("properFraction",Ent (PlainModule "Prelude") (HsVar "properFraction") (MethodOf "RealFrac" 2 ["properFraction"])),("putChar",Ent (PlainModule "PreludeIO") (HsVar "putChar") Value),("putStr",Ent (PlainModule "PreludeIO") (HsVar "putStr") Value),("putStrLn",Ent (PlainModule "PreludeIO") (HsVar "putStrLn") Value),("quot",Ent (PlainModule "Prelude") (HsVar "quot") (MethodOf "Integral" 2 ["quot","rem"])),("quotRem",Ent (PlainModule "Prelude") (HsVar "quotRem") (MethodOf "Integral" 2 ["quotRem","divMod"])),("read",Ent (PlainModule "PreludeText") (HsVar "read") Value),("readAp",Ent (PlainModule "PreludeText") (HsVar "readAp") Value),("readArgument",Ent (PlainModule "PreludeText") (HsVar "readArgument") Value),("readChoice",Ent (PlainModule "PreludeText") (HsVar "readChoice") Value),("readFile",Ent (PlainModule "PreludeIO") (HsVar "readFile") Value),("readIO",Ent (PlainModule "PreludeIO") (HsVar "readIO") Value),("readList",Ent (PlainModule "PreludeText") (HsVar "readList") (MethodOf "Read" 0 ["readList"])),("readLn",Ent (PlainModule "PreludeIO") (HsVar "readLn") Value),("readParen",Ent (PlainModule "PreludeText") (HsVar "readParen") Value),("readParenArg",Ent (PlainModule "PreludeText") (HsVar "readParenArg") Value),("readToken",Ent (PlainModule "PreludeText") (HsVar "readToken") Value),("reads",Ent (PlainModule "PreludeText") (HsVar "reads") Value),("readsPrec",Ent (PlainModule "PreludeText") (HsVar "readsPrec") (MethodOf "Read" 0 ["readsPrec"])),("realToFrac",Ent (PlainModule "Prelude") (HsVar "realToFrac") Value),("recip",Ent (PlainModule "Prelude") (HsVar "recip") (MethodOf "Fractional" 1 ["recip"])),("rem",Ent (PlainModule "Prelude") (HsVar "rem") (MethodOf "Integral" 2 ["quot","rem"])),("repeat",Ent (PlainModule "PreludeList") (HsVar "repeat") Value),("replicate",Ent (PlainModule "PreludeList") (HsVar "replicate") Value),("return",Ent (PlainModule "Prelude") (HsVar "return") (MethodOf "Monad" 0 ["return"])),("reverse",Ent (PlainModule "PreludeList") (HsVar "reverse") Value),("round",Ent (PlainModule "Prelude") (HsVar "round") (MethodOf "RealFrac" 2 ["truncate","round"])),("scaleFloat",Ent (PlainModule "Prelude") (HsVar "scaleFloat") (MethodOf "RealFloat" 2 ["scaleFloat"])),("scanl",Ent (PlainModule "PreludeList") (HsVar "scanl") Value),("scanl1",Ent (PlainModule "PreludeList") (HsVar "scanl1") Value),("scanr",Ent (PlainModule "PreludeList") (HsVar "scanr") Value),("scanr1",Ent (PlainModule "PreludeList") (HsVar "scanr1") Value),("seq",Ent (PlainModule "Prelude") (HsVar "seq") Value),("sequence",Ent (PlainModule "Prelude") (HsVar "sequence") Value),("sequence_",Ent (PlainModule "Prelude") (HsVar "sequence_") Value),("show",Ent (PlainModule "PreludeText") (HsVar "show") (MethodOf "Show" 0 ["show"])),("showArgument",Ent (PlainModule "PreludeText") (HsVar "showArgument") Value),("showChar",Ent (PlainModule "PreludeText") (HsVar "showChar") Value),("showList",Ent (PlainModule "PreludeText") (HsVar "showList") (MethodOf "Show" 0 ["showList"])),("showParen",Ent (PlainModule "PreludeText") (HsVar "showParen") Value),("showParenArg",Ent (PlainModule "PreludeText") (HsVar "showParenArg") Value),("showString",Ent (PlainModule "PreludeText") (HsVar "showString") Value),("shows",Ent (PlainModule "PreludeText") (HsVar "shows") Value),("showsPrec",Ent (PlainModule "PreludeText") (HsVar "showsPrec") (MethodOf "Show" 0 ["showsPrec"])),("significand",Ent (PlainModule "Prelude") (HsVar "significand") (MethodOf "RealFloat" 2 ["significand"])),("signum",Ent (PlainModule "Prelude") (HsVar "signum") (MethodOf "Num" 2 ["abs","signum"])),("sin",Ent (PlainModule "Prelude") (HsVar "sin") (MethodOf "Floating" 1 ["sin","cos","tan"])),("sinh",Ent (PlainModule "Prelude") (HsVar "sinh") (MethodOf "Floating" 1 ["sinh","cosh","tanh"])),("snd",Ent (PlainModule "Prelude") (HsVar "snd") Value),("span",Ent (PlainModule "PreludeList") (HsVar "span") Value),("splitAt",Ent (PlainModule "PreludeList") (HsVar "splitAt") Value),("sqrt",Ent (PlainModule "Prelude") (HsVar "sqrt") (MethodOf "Floating" 1 ["exp","log","sqrt"])),("subtract",Ent (PlainModule "Prelude") (HsVar "subtract") Value),("succ",Ent (PlainModule "Prelude") (HsVar "succ") (MethodOf "Enum" 0 ["succ","pred"])),("sum",Ent (PlainModule "PreludeList") (HsVar "sum") Value),("tail",Ent (PlainModule "PreludeList") (HsVar "tail") Value),("take",Ent (PlainModule "PreludeList") (HsVar "take") Value),("takeWhile",Ent (PlainModule "PreludeList") (HsVar "takeWhile") Value),("tan",Ent (PlainModule "Prelude") (HsVar "tan") (MethodOf "Floating" 1 ["sin","cos","tan"])),("tanh",Ent (PlainModule "Prelude") (HsVar "tanh") (MethodOf "Floating" 1 ["sinh","cosh","tanh"])),("toEnum",Ent (PlainModule "Prelude") (HsVar "toEnum") (MethodOf "Enum" 0 ["toEnum"])),("toInteger",Ent (PlainModule "Prelude") (HsVar "toInteger") (MethodOf "Integral" 2 ["toInteger"])),("toRational",Ent (PlainModule "Prelude") (HsVar "toRational") (MethodOf "Real" 2 ["toRational"])),("truncate",Ent (PlainModule "Prelude") (HsVar "truncate") (MethodOf "RealFrac" 2 ["truncate","round"])),("uncurry",Ent (PlainModule "Prelude") (HsVar "uncurry") Value),("undefined",Ent (PlainModule "Prelude") (HsVar "undefined") Value),("unlines",Ent (PlainModule "PreludeList") (HsVar "unlines") Value),("until",Ent (PlainModule "Prelude") (HsVar "until") Value),("unwords",Ent (PlainModule "PreludeList") (HsVar "unwords") Value),("unzip",Ent (PlainModule "PreludeList") (HsVar "unzip") Value),("unzip3",Ent (PlainModule "PreludeList") (HsVar "unzip3") Value),("userError",Ent (PlainModule "PreludeIO") (HsVar "userError") Value),("words",Ent (PlainModule "PreludeList") (HsVar "words") Value),("writeFile",Ent (PlainModule "PreludeIO") (HsVar "writeFile") Value),("zip",Ent (PlainModule "PreludeList") (HsVar "zip") Value),("zip3",Ent (PlainModule "PreludeList") (HsVar "zip3") Value),("zipWith",Ent (PlainModule "PreludeList") (HsVar "zipWith") Value),("zipWith3",Ent (PlainModule "PreludeList") (HsVar "zipWith3") Value),("||",Ent (PlainModule "Prelude") (HsVar "||") Value)]