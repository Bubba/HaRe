[("*>",Ent (PlainModule "Control.Applicative") (HsVar "*>") Value),("<$",Ent (PlainModule "Control.Applicative") (HsVar "<$") Value),("<$>",Ent (PlainModule "Control.Applicative") (HsVar "<$>") Value),("<*",Ent (PlainModule "Control.Applicative") (HsVar "<*") Value),("<**>",Ent (PlainModule "Control.Applicative") (HsVar "<**>") Value),("<*>",Ent (PlainModule "Control.Applicative") (HsVar "<*>") (MethodOf "Applicative" 1 ["<*>"])),("<|>",Ent (PlainModule "Control.Applicative") (HsVar "<|>") (MethodOf "Alternative" 1 ["<|>"])),("Alternative",Ent (PlainModule "Control.Applicative") (HsCon "Alternative") (Class 1 ["empty","<|>"])),("Applicative",Ent (PlainModule "Control.Applicative") (HsCon "Applicative") (Class 1 ["pure","<*>"])),("Const",Ent (PlainModule "Control.Applicative") (HsCon "Const") (Type (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "Const", conArity = 1, conFields = Just ["getConst"]}], fields = ["getConst"]}))),("Const",Ent (PlainModule "Control.Applicative") (HsCon "Const") (ConstrOf "Const" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "Const", conArity = 1, conFields = Just ["getConst"]}], fields = ["getConst"]}))),("WrapArrow",Ent (PlainModule "Control.Applicative") (HsCon "WrapArrow") (ConstrOf "WrappedArrow" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapArrow", conArity = 1, conFields = Just ["unwrapArrow"]}], fields = ["unwrapArrow"]}))),("WrapMonad",Ent (PlainModule "Control.Applicative") (HsCon "WrapMonad") (ConstrOf "WrappedMonad" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapMonad", conArity = 1, conFields = Just ["unwrapMonad"]}], fields = ["unwrapMonad"]}))),("WrappedArrow",Ent (PlainModule "Control.Applicative") (HsCon "WrappedArrow") (Type (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapArrow", conArity = 1, conFields = Just ["unwrapArrow"]}], fields = ["unwrapArrow"]}))),("WrappedMonad",Ent (PlainModule "Control.Applicative") (HsCon "WrappedMonad") (Type (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapMonad", conArity = 1, conFields = Just ["unwrapMonad"]}], fields = ["unwrapMonad"]}))),("ZipList",Ent (PlainModule "Control.Applicative") (HsCon "ZipList") (Type (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "ZipList", conArity = 1, conFields = Just ["getZipList"]}], fields = ["getZipList"]}))),("ZipList",Ent (PlainModule "Control.Applicative") (HsCon "ZipList") (ConstrOf "ZipList" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "ZipList", conArity = 1, conFields = Just ["getZipList"]}], fields = ["getZipList"]}))),("empty",Ent (PlainModule "Control.Applicative") (HsVar "empty") (MethodOf "Alternative" 1 ["empty"])),("getConst",Ent (PlainModule "Control.Applicative") (HsVar "getConst") (FieldOf "Const" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "Const", conArity = 1, conFields = Just ["getConst"]}], fields = ["getConst"]}))),("getZipList",Ent (PlainModule "Control.Applicative") (HsVar "getZipList") (FieldOf "ZipList" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "ZipList", conArity = 1, conFields = Just ["getZipList"]}], fields = ["getZipList"]}))),("liftA",Ent (PlainModule "Control.Applicative") (HsVar "liftA") Value),("liftA2",Ent (PlainModule "Control.Applicative") (HsVar "liftA2") Value),("liftA3",Ent (PlainModule "Control.Applicative") (HsVar "liftA3") Value),("many",Ent (PlainModule "Control.Applicative") (HsVar "many") Value),("optional",Ent (PlainModule "Control.Applicative") (HsVar "optional") Value),("pure",Ent (PlainModule "Control.Applicative") (HsVar "pure") (MethodOf "Applicative" 1 ["pure"])),("some",Ent (PlainModule "Control.Applicative") (HsVar "some") Value),("unwrapArrow",Ent (PlainModule "Control.Applicative") (HsVar "unwrapArrow") (FieldOf "WrappedArrow" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapArrow", conArity = 1, conFields = Just ["unwrapArrow"]}], fields = ["unwrapArrow"]}))),("unwrapMonad",Ent (PlainModule "Control.Applicative") (HsVar "unwrapMonad") (FieldOf "WrappedMonad" (TypeInfo {defType = Just Newtype, constructors = [ConInfo {conName = "WrapMonad", conArity = 1, conFields = Just ["unwrapMonad"]}], fields = ["unwrapMonad"]})))]