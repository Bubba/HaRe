[("Just",Ent (PlainModule "Prelude") (HsCon "Just") (ConstrOf "Maybe" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("Maybe",Ent (PlainModule "Prelude") (HsCon "Maybe") (Type (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("Nothing",Ent (PlainModule "Prelude") (HsCon "Nothing") (ConstrOf "Maybe" (TypeInfo {defType = Just Data, constructors = [ConInfo {conName = "Nothing", conArity = 0, conFields = Nothing},ConInfo {conName = "Just", conArity = 1, conFields = Nothing}], fields = []}))),("catMaybes",Ent (PlainModule "Maybe") (HsVar "catMaybes") Value),("fromJust",Ent (PlainModule "Maybe") (HsVar "fromJust") Value),("fromMaybe",Ent (PlainModule "Maybe") (HsVar "fromMaybe") Value),("isJust",Ent (PlainModule "Maybe") (HsVar "isJust") Value),("isNothing",Ent (PlainModule "Maybe") (HsVar "isNothing") Value),("listToMaybe",Ent (PlainModule "Maybe") (HsVar "listToMaybe") Value),("mapMaybe",Ent (PlainModule "Maybe") (HsVar "mapMaybe") Value),("maybe",Ent (PlainModule "Prelude") (HsVar "maybe") Value),("maybeToList",Ent (PlainModule "Maybe") (HsVar "maybeToList") Value)]